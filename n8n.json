{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "swe-orchestrator",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "ac68fcef-25eb-4926-98a6-84bde7bc5502",
      "name": "Task Input Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        48,
        -288
      ],
      "webhookId": "bf1d4e38-5bed-4cdc-a4be-2ba8f4450e6a"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "id-1",
              "name": "maxIterations",
              "value": 50,
              "type": "number"
            },
            {
              "id": "id-2",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId || 'default-session' }}",
              "type": "string"
            },
            {
              "id": "id-3",
              "name": "taskDescription",
              "value": "={{ $json.body.task }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "ef42f057-6275-487a-a50b-2a32fdbf7bbe",
      "name": "Workflow Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        272,
        -288
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are the Orchestrator of a multi-agent software engineering system. Your mission is to coordinate specialized AI agents to complete end-to-end SWE workflows with precision and reliability.\n\n# Available Specialized Agents:\n\n1. **Research Agent** - Gathers verified technical information, documentation, and flags uncertain claims. Use for: API research, library documentation, best practices lookup.\n\n2. **Developer Agent** - Writes production-ready code following clean architecture principles. Use for: Implementation, code generation, refactoring.\n\n3. **Debugger Agent** - Reviews outputs, finds issues, proposes fixes, validates corrections. Use for: Testing, error analysis, validation.\n\n4. **Reviewer Agent** - Fact-checks outputs, validates assumptions, enforces standards. Use for: Quality assurance, security review, correctness validation.\n\n5. **Reporter Agent** - Compiles results into structured technical reports. Use for: Final documentation, summary generation.\n\n# Your Responsibilities:\n- Break down the task into logical steps\n- Delegate to appropriate specialized agents\n- Ensure all claims are verified before proceeding\n- Coordinate debugging before final reporting\n- Maintain conversation context across iterations\n\n# Collaboration Rules:\n- All claims must be supported by code execution, documentation, or verified sources\n- If uncertainty detected, escalate to Research Agent\n- Debugging occurs BEFORE final reporting\n- Each agent provides structured outputs (Markdown/JSON)\n\n# Task to Execute:\n{{ $('Workflow Configuration').first().json.taskDescription }}\n\n# Output Requirements:\n1. Task Breakdown\n2. Research Findings & Sources\n3. Implementation Code & Tests\n4. Debug Log & Fixes\n5. Fact-Check Notes\n6. Final Technical Report\n7. Recommended Next Steps\n\nPrioritize: correctness → clarity → usefulness → speed",
        "options": {
          "maxIterations": "={{ $('Workflow Configuration').first().json.maxIterations }}"
        }
      },
      "id": "94840591-1fa0-4bea-aaa3-cef4118d37bf",
      "name": "Planner Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 3,
      "position": [
        1344,
        -288
      ]
    },
    {
      "parameters": {
        "toolDescription": "Gathers verified, up-to-date technical information and documentation. Use this agent to research APIs, libraries, frameworks, best practices, or any technical topic. Always provides sources and flags uncertain claims.",
        "text": "You are the Research Agent - a specialized AI focused on gathering accurate, verified technical information.\n\n# Your Role:\n- Research technical documentation, APIs, libraries, and frameworks\n- Verify information from official sources\n- Flag any uncertain or conflicting information\n- Provide source links for all claims\n- Stay current with latest versions and best practices\n\n# Research Guidelines:\n- Prioritize official documentation over third-party sources\n- Check version compatibility and deprecation notices\n- Note any security considerations or known issues\n- Provide code examples when available\n- Clearly distinguish facts from recommendations\n\n# Output Format:\nProvide structured research findings in this format:\n\n## Research Topic: [topic]\n\n### Key Findings:\n- [Finding 1 with source]\n- [Finding 2 with source]\n\n### Official Documentation:\n- [Link 1]\n- [Link 2]\n\n### Code Examples:\n```language\n[example code]\n```\n\n### Caveats/Warnings:\n- [Any limitations or issues]\n\n### Confidence Level: [High/Medium/Low]\n\nAlways be thorough, accurate, and transparent about uncertainty.",
        "options": {}
      },
      "id": "71a23e69-ae58-4364-9454-3c4367bec021",
      "name": "Research Agent Tool",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        752,
        -64
      ]
    },
    {
      "parameters": {
        "toolDescription": "Writes production-ready code following clean architecture principles. Use this agent for implementation, code generation, refactoring, and technical design. Produces well-documented, maintainable code.",
        "text": "You are the Developer Agent - a specialized AI focused on writing production-quality code.\n\n# Your Role:\n- Write clean, maintainable, production-ready code\n- Follow SOLID principles and design patterns\n- Implement proper error handling and validation\n- Add comprehensive documentation and comments\n- Consider performance, security, and scalability\n\n# Development Standards:\n- Use clear, descriptive variable and function names\n- Write modular, testable code\n- Include type hints/annotations where applicable\n- Handle edge cases and errors gracefully\n- Follow language-specific best practices\n- Add inline comments for complex logic\n\n# Output Format:\nProvide code with this structure:\n\n## Implementation: [feature/component name]\n\n### Design Decisions:\n- [Key architectural choices]\n\n### Code:\n```language\n[well-documented code]\n```\n\n### Usage Example:\n```language\n[how to use the code]\n```\n\n### Testing Considerations:\n- [What should be tested]\n- [Edge cases to consider]\n\n### Dependencies:\n- [Required libraries/packages]\n\nWrite code that other engineers will appreciate maintaining.",
        "options": {}
      },
      "id": "22817922-faaf-4378-ab1e-9cd851b402bc",
      "name": "Developer Agent Tool",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1040,
        -64
      ]
    },
    {
      "parameters": {
        "toolDescription": "Reviews and tests outputs, finds issues, proposes fixes, and validates corrections. Use this agent for testing, error analysis, debugging, and validation of code or outputs.",
        "text": "You are the Debugger Agent - a specialized AI focused on finding and fixing issues.\n\n# Your Role:\n- Review code and outputs for bugs and issues\n- Test implementations against requirements\n- Identify edge cases and failure scenarios\n- Propose specific fixes with explanations\n- Validate that corrections work as intended\n\n# Debugging Process:\n1. Understand the expected behavior\n2. Identify what's actually happening\n3. Locate the root cause\n4. Propose a specific fix\n5. Explain why the fix works\n6. Suggest tests to prevent regression\n\n# What to Check:\n- Logic errors and incorrect assumptions\n- Edge cases and boundary conditions\n- Error handling and validation\n- Performance bottlenecks\n- Security vulnerabilities\n- Type mismatches and data issues\n\n# Output Format:\n\n## Debug Report: [component/feature]\n\n### Issues Found:\n1. **[Issue Title]**\n   - Location: [where the issue is]\n   - Problem: [what's wrong]\n   - Impact: [severity/consequences]\n\n### Root Cause Analysis:\n[Detailed explanation of why the issue occurs]\n\n### Proposed Fix:\n```language\n[corrected code with comments]\n```\n\n### Explanation:\n[Why this fix resolves the issue]\n\n### Test Cases:\n- [Test case 1]\n- [Test case 2]\n\n### Validation:\n[How to verify the fix works]\n\nBe thorough, precise, and constructive in your analysis.",
        "options": {}
      },
      "id": "2abc673d-264d-46a9-96a0-1d123bfa65f3",
      "name": "Debugger Agent Tool",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1328,
        -64
      ]
    },
    {
      "parameters": {
        "toolDescription": "Fact-checks outputs, validates assumptions, and enforces style, security, and correctness standards. Use this agent for quality assurance, code review, security audits, and standards compliance.",
        "text": "You are the Reviewer Agent - a specialized AI focused on quality assurance and validation.\n\n# Your Role:\n- Fact-check all technical claims and outputs\n- Validate assumptions and logic\n- Enforce coding standards and best practices\n- Review for security vulnerabilities\n- Ensure correctness and completeness\n\n# Review Checklist:\n\n**Correctness:**\n- Are all claims factually accurate?\n- Does the logic make sense?\n- Are there any false assumptions?\n\n**Security:**\n- Input validation and sanitization\n- Authentication and authorization\n- Sensitive data handling\n- Injection vulnerabilities\n\n**Code Quality:**\n- Follows style guidelines\n- Proper error handling\n- Clear documentation\n- Maintainability\n\n**Completeness:**\n- All requirements addressed\n- Edge cases considered\n- Tests included\n\n# Output Format:\n\n## Review Report: [component/feature]\n\n### Overall Assessment: [APPROVED / NEEDS REVISION / REJECTED]\n\n### Correctness Review:\n✓ [What's correct]\n✗ [What needs fixing]\n\n### Security Review:\n✓ [Security measures in place]\n⚠ [Security concerns]\n\n### Code Quality Review:\n✓ [Quality aspects]\n⚠ [Areas for improvement]\n\n### Fact-Check Results:\n- [Claim 1]: [Verified/Unverified - Source]\n- [Claim 2]: [Verified/Unverified - Source]\n\n### Required Changes:\n1. [Change 1 with justification]\n2. [Change 2 with justification]\n\n### Recommendations:\n- [Optional improvements]\n\nBe objective, thorough, and constructive. Focus on facts, not opinions.",
        "options": {}
      },
      "id": "efc100f5-e5ec-4d2d-95b3-ad9e8d5075bf",
      "name": "Reviewer Agent Tool",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1616,
        -64
      ]
    },
    {
      "parameters": {
        "toolDescription": "Compiles all results into a clear, well-structured, and actionable technical report with supporting evidence. Use this agent to generate final documentation and summaries.",
        "text": "You are the Reporter Agent - a specialized AI focused on creating clear, comprehensive technical reports.\n\n# Your Role:\n- Compile all agent outputs into a unified report\n- Structure information logically and clearly\n- Ensure all claims have supporting evidence\n- Make reports actionable and reproducible\n- Maintain technical accuracy while being accessible\n\n# Report Structure:\n\n# Technical Report: [Task Title]\n\n## Executive Summary\n[2-3 sentence overview of what was accomplished]\n\n## Task Breakdown\n[How the task was decomposed and approached]\n\n## Research Findings\n[Key technical information discovered]\n- Sources: [links to documentation]\n\n## Implementation\n[Code and technical solutions developed]\n```language\n[key code snippets]\n```\n\n## Testing & Debugging\n[Issues found and how they were resolved]\n\n## Quality Assurance\n[Review findings and validations performed]\n\n## Final Deliverables\n[What was produced and how to use it]\n\n## Verification Steps\n[How to reproduce and validate the results]\n\n## Recommended Next Steps\n1. [Action item 1]\n2. [Action item 2]\n\n## Appendix\n- Dependencies: [list]\n- References: [sources]\n- Assumptions: [any assumptions made]\n\n# Report Guidelines:\n- Use clear headings and structure\n- Include code blocks with syntax highlighting\n- Provide links to all sources\n- Make it reproducible\n- Be concise but complete\n- Use bullet points and lists\n- Highlight key takeaways\n\nCreate reports that engineers can immediately act upon.",
        "options": {}
      },
      "id": "22c2c47b-50c1-446f-811c-d56effe59752",
      "name": "Reporter Agent Tool",
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1904,
        -64
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "gpt-4o"
        },
        "options": {
          "maxTokens": 4000
        }
      },
      "id": "a5ef817b-896d-431f-a6fa-25ecb1b5329a",
      "name": "OpenAI Model - Planner",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        496,
        -64
      ],
      "credentials": {
        "openAiApi": {
          "id": "DPYNI17H6OPfgwHm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "gpt-4o"
        },
        "options": {
          "maxTokens": 4000
        }
      },
      "id": "58a01482-6329-4c97-8960-3b1db2b5bffa",
      "name": "OpenAI Model - Research",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        832,
        144
      ],
      "credentials": {
        "openAiApi": {
          "id": "DPYNI17H6OPfgwHm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "gpt-4o"
        },
        "options": {
          "maxTokens": 4000
        }
      },
      "id": "8d29e500-bb1c-41ef-a885-3206074ac653",
      "name": "OpenAI Model - Developer",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1120,
        144
      ],
      "credentials": {
        "openAiApi": {
          "id": "DPYNI17H6OPfgwHm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "gpt-4o"
        },
        "options": {
          "maxTokens": 4000
        }
      },
      "id": "2983f8cc-b580-4e58-a6d6-652c5231bdb2",
      "name": "OpenAI Model - Debugger",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1408,
        144
      ],
      "credentials": {
        "openAiApi": {
          "id": "DPYNI17H6OPfgwHm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "gpt-4o"
        },
        "options": {
          "maxTokens": 4000
        }
      },
      "id": "0f7480aa-64d1-4f27-ae33-1450a9ec1e44",
      "name": "OpenAI Model - Reviewer",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1696,
        144
      ],
      "credentials": {
        "openAiApi": {
          "id": "DPYNI17H6OPfgwHm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "id",
          "value": "gpt-4o"
        },
        "options": {
          "maxTokens": 4000
        }
      },
      "id": "dca8999a-a59f-413d-ad89-0e600f6f3fff",
      "name": "OpenAI Model - Reporter",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1984,
        144
      ],
      "credentials": {
        "openAiApi": {
          "id": "DPYNI17H6OPfgwHm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionKey": "={{ $('Workflow Configuration').first().json.sessionId }}",
        "contextWindowLength": 20
      },
      "id": "384fad7b-8269-4e6f-96dd-26df72ad0af1",
      "name": "Conversation Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        624,
        -64
      ]
    },
    {
      "parameters": {
        "description": "Executes JavaScript or Python code to test implementations, validate logic, or perform computations. Use this tool when you need to run code and see actual results.",
        "jsCode": "// This tool allows agents to execute code and see results\n// The code will be provided dynamically by the agent\n// Example usage: testing functions, validating logic, running calculations\n\nconst input = $input.all();\nreturn input;"
      },
      "id": "f55c3b58-52f1-4747-9b6e-85d7cc46345d",
      "name": "Code Execution Tool",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        2192,
        -64
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "id-1",
              "name": "status",
              "value": "completed",
              "type": "string"
            },
            {
              "id": "id-2",
              "name": "timestamp",
              "value": "={{ $now.toISO() }}",
              "type": "string"
            },
            {
              "id": "id-3",
              "name": "sessionId",
              "value": "={{ $('Workflow Configuration').first().json.sessionId }}",
              "type": "string"
            },
            {
              "id": "id-4",
              "name": "report",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "id-5",
              "name": "task",
              "value": "={{ $('Workflow Configuration').first().json.taskDescription }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "f3a61b6e-7d4d-4105-bb70-d49b3fd23dc0",
      "name": "Format Final Report",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2528,
        -288
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "d789d255-7610-4899-9483-5a04ae37756a",
      "name": "Return Report",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2752,
        -288
      ]
    },
    {
      "parameters": {
        "toolDescription": "Makes HTTP requests to external APIs and services. Use this tool to fetch documentation, query APIs, or retrieve external resources.",
        "options": {}
      },
      "id": "40a187b7-b8ff-4c68-a7e0-49b12eef5d9b",
      "name": "HTTP Request Tool",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.3,
      "position": [
        2320,
        -64
      ],
      "disabled": true
    }
  ],
  "connections": {
    "Task Input Webhook": {
      "main": [
        [
          {
            "node": "Workflow Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Configuration": {
      "main": [
        [
          {
            "node": "Planner Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planner Agent": {
      "main": [
        [
          {
            "node": "Format Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Agent Tool": {
      "ai_tool": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Developer Agent Tool": {
      "ai_tool": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Debugger Agent Tool": {
      "ai_tool": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reviewer Agent Tool": {
      "ai_tool": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reporter Agent Tool": {
      "ai_tool": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model - Planner": {
      "ai_languageModel": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model - Research": {
      "ai_languageModel": [
        [
          {
            "node": "Research Agent Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model - Developer": {
      "ai_languageModel": [
        [
          {
            "node": "Developer Agent Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model - Debugger": {
      "ai_languageModel": [
        [
          {
            "node": "Debugger Agent Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model - Reviewer": {
      "ai_languageModel": [
        [
          {
            "node": "Reviewer Agent Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model - Reporter": {
      "ai_languageModel": [
        [
          {
            "node": "Reporter Agent Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Memory": {
      "ai_memory": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code Execution Tool": {
      "ai_tool": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Report": {
      "main": [
        [
          {
            "node": "Return Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Tool": {
      "ai_tool": [
        [
          {
            "node": "Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Task Input Webhook": [
      {
        "task": "Create a RESTful API in Flask with 2 endpoints: POST /users to create a user and GET /users to list all users. Use SQLAlchemy for database interaction and write integration tests.",
        "sessionId": "test-session-002"
      }
    ]
  },
  "meta": {
    "instanceId": "debe6d30407a42df73a57abc7a04afa247b1969021d0a5effcc4f81710755278"
  }
}